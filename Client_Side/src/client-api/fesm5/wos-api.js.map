{"version":3,"file":"wos-api.js.map","sources":["ng://wos-api/variables.ts","ng://wos-api/configuration.ts","ng://wos-api/api/locations.service.ts","ng://wos-api/api/users.service.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * World_of_Stories-Api\n * Interactive stories application for NodeJs typescript server\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { RequestDeleteCity } from '../model/requestDeleteCity';\nimport { RequestDeletePlace } from '../model/requestDeletePlace';\nimport { RequestGetCities } from '../model/requestGetCities';\nimport { RequestGetCity } from '../model/requestGetCity';\nimport { RequestGetPlace } from '../model/requestGetPlace';\nimport { RequestGetPlaces } from '../model/requestGetPlaces';\nimport { RequestNewCity } from '../model/requestNewCity';\nimport { RequestNewCityDescription } from '../model/requestNewCityDescription';\nimport { RequestNewCityTravel } from '../model/requestNewCityTravel';\nimport { RequestNewPlace } from '../model/requestNewPlace';\nimport { RequestNewPlaceDescription } from '../model/requestNewPlaceDescription';\nimport { RequestNewPlaceEntry } from '../model/requestNewPlaceEntry';\nimport { RequestPublishCity } from '../model/requestPublishCity';\nimport { RequestPublishPlace } from '../model/requestPublishPlace';\nimport { RequestRemoveCityDescription } from '../model/requestRemoveCityDescription';\nimport { RequestRemoveCityTravel } from '../model/requestRemoveCityTravel';\nimport { RequestRemovePlaceDescription } from '../model/requestRemovePlaceDescription';\nimport { RequestRemovePlaceEntry } from '../model/requestRemovePlaceEntry';\nimport { RequestUpdateCityDescription } from '../model/requestUpdateCityDescription';\nimport { RequestUpdateCityTravel } from '../model/requestUpdateCityTravel';\nimport { RequestUpdatePlaceDescription } from '../model/requestUpdatePlaceDescription';\nimport { RequestUpdatePlaceEntry } from '../model/requestUpdatePlaceEntry';\nimport { ResponseData } from '../model/responseData';\nimport { ResponseDeleteCity } from '../model/responseDeleteCity';\nimport { ResponseDeletePlace } from '../model/responseDeletePlace';\nimport { ResponseGetCities } from '../model/responseGetCities';\nimport { ResponseGetCity } from '../model/responseGetCity';\nimport { ResponseGetPlace } from '../model/responseGetPlace';\nimport { ResponseGetPlaces } from '../model/responseGetPlaces';\nimport { ResponseNewCity } from '../model/responseNewCity';\nimport { ResponseNewCityDescription } from '../model/responseNewCityDescription';\nimport { ResponseNewCityTravel } from '../model/responseNewCityTravel';\nimport { ResponseNewPlace } from '../model/responseNewPlace';\nimport { ResponseNewPlaceDescription } from '../model/responseNewPlaceDescription';\nimport { ResponseNewPlaceEntry } from '../model/responseNewPlaceEntry';\nimport { ResponsePublishCity } from '../model/responsePublishCity';\nimport { ResponsePublishPlace } from '../model/responsePublishPlace';\nimport { ResponseRemoveCityDescription } from '../model/responseRemoveCityDescription';\nimport { ResponseRemoveCityTravel } from '../model/responseRemoveCityTravel';\nimport { ResponseRemovePlaceDescription } from '../model/responseRemovePlaceDescription';\nimport { ResponseRemovePlaceEntry } from '../model/responseRemovePlaceEntry';\nimport { ResponseUpdateCityDescription } from '../model/responseUpdateCityDescription';\nimport { ResponseUpdateCityTravel } from '../model/responseUpdateCityTravel';\nimport { ResponseUpdatePlaceDescription } from '../model/responseUpdatePlaceDescription';\nimport { ResponseUpdatePlaceEntry } from '../model/responseUpdatePlaceEntry';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationsService {\n\n    protected basePath = 'http://localhost:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete a City\n     * Delete a City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteCity(data: RequestDeleteCity, observe?: 'body', reportProgress?: boolean): Observable<ResponseDeleteCity>;\n    public deleteCity(data: RequestDeleteCity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDeleteCity>>;\n    public deleteCity(data: RequestDeleteCity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDeleteCity>>;\n    public deleteCity(data: RequestDeleteCity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling deleteCity.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseDeleteCity>(`${this.basePath}/cities/delete`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete a Place\n     * Delete a Place\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePlace(data: RequestDeletePlace, observe?: 'body', reportProgress?: boolean): Observable<ResponseDeletePlace>;\n    public deletePlace(data: RequestDeletePlace, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDeletePlace>>;\n    public deletePlace(data: RequestDeletePlace, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDeletePlace>>;\n    public deletePlace(data: RequestDeletePlace, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling deletePlace.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseDeletePlace>(`${this.basePath}/places/delete`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all Cities\n     * Get all Cities, filtering by publish status\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCities(data: RequestGetCities, observe?: 'body', reportProgress?: boolean): Observable<ResponseGetCities>;\n    public getCities(data: RequestGetCities, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetCities>>;\n    public getCities(data: RequestGetCities, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetCities>>;\n    public getCities(data: RequestGetCities, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling getCities.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseGetCities>(`${this.basePath}/cities`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get City\n     * Get complete info of one City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCity(data: RequestGetCity, observe?: 'body', reportProgress?: boolean): Observable<ResponseGetCity>;\n    public getCity(data: RequestGetCity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetCity>>;\n    public getCity(data: RequestGetCity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetCity>>;\n    public getCity(data: RequestGetCity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling getCity.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseGetCity>(`${this.basePath}/cities/city`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get Place\n     * Get complete info of one Place\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPlace(data: RequestGetPlace, observe?: 'body', reportProgress?: boolean): Observable<ResponseGetPlace>;\n    public getPlace(data: RequestGetPlace, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetPlace>>;\n    public getPlace(data: RequestGetPlace, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetPlace>>;\n    public getPlace(data: RequestGetPlace, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling getPlace.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseGetPlace>(`${this.basePath}/places/place`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get all Places of a City\n     * Get all Places of a City filtering by publish status\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPlaces(data: RequestGetPlaces, observe?: 'body', reportProgress?: boolean): Observable<ResponseGetPlaces>;\n    public getPlaces(data: RequestGetPlaces, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetPlaces>>;\n    public getPlaces(data: RequestGetPlaces, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetPlaces>>;\n    public getPlaces(data: RequestGetPlaces, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling getPlaces.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseGetPlaces>(`${this.basePath}/places`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add new City\n     * Add new City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newCity(data: RequestNewCity, observe?: 'body', reportProgress?: boolean): Observable<ResponseNewCity>;\n    public newCity(data: RequestNewCity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseNewCity>>;\n    public newCity(data: RequestNewCity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseNewCity>>;\n    public newCity(data: RequestNewCity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling newCity.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseNewCity>(`${this.basePath}/cities/new`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add description to City\n     * Add new description to existing City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newCityDescription(data: RequestNewCityDescription, observe?: 'body', reportProgress?: boolean): Observable<ResponseNewCityDescription>;\n    public newCityDescription(data: RequestNewCityDescription, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseNewCityDescription>>;\n    public newCityDescription(data: RequestNewCityDescription, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseNewCityDescription>>;\n    public newCityDescription(data: RequestNewCityDescription, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling newCityDescription.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseNewCityDescription>(`${this.basePath}/cities/description/new`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add travel to City\n     * Add new travel to existing City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newCityTravel(data: RequestNewCityTravel, observe?: 'body', reportProgress?: boolean): Observable<ResponseNewCityTravel>;\n    public newCityTravel(data: RequestNewCityTravel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseNewCityTravel>>;\n    public newCityTravel(data: RequestNewCityTravel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseNewCityTravel>>;\n    public newCityTravel(data: RequestNewCityTravel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling newCityTravel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseNewCityTravel>(`${this.basePath}/cities/travel/new`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add new Place\n     * Add new Place in existing City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newPlace(data: RequestNewPlace, observe?: 'body', reportProgress?: boolean): Observable<ResponseNewPlace>;\n    public newPlace(data: RequestNewPlace, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseNewPlace>>;\n    public newPlace(data: RequestNewPlace, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseNewPlace>>;\n    public newPlace(data: RequestNewPlace, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling newPlace.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseNewPlace>(`${this.basePath}/places/new`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add description to Place\n     * Add new description to existing Place\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newPlaceDescription(data: RequestNewPlaceDescription, observe?: 'body', reportProgress?: boolean): Observable<ResponseNewPlaceDescription>;\n    public newPlaceDescription(data: RequestNewPlaceDescription, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseNewPlaceDescription>>;\n    public newPlaceDescription(data: RequestNewPlaceDescription, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseNewPlaceDescription>>;\n    public newPlaceDescription(data: RequestNewPlaceDescription, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling newPlaceDescription.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseNewPlaceDescription>(`${this.basePath}/places/description/new`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Add Entry to Place\n     * Add new Entry to existing Place\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public newPlaceEntry(data: RequestNewPlaceEntry, observe?: 'body', reportProgress?: boolean): Observable<ResponseNewPlaceEntry>;\n    public newPlaceEntry(data: RequestNewPlaceEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseNewPlaceEntry>>;\n    public newPlaceEntry(data: RequestNewPlaceEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseNewPlaceEntry>>;\n    public newPlaceEntry(data: RequestNewPlaceEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling newPlaceEntry.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseNewPlaceEntry>(`${this.basePath}/places/entry/new`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Publish a City\n     * Publish the City content to readers\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public publishCity(data: RequestPublishCity, observe?: 'body', reportProgress?: boolean): Observable<ResponsePublishCity>;\n    public publishCity(data: RequestPublishCity, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponsePublishCity>>;\n    public publishCity(data: RequestPublishCity, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponsePublishCity>>;\n    public publishCity(data: RequestPublishCity, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling publishCity.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponsePublishCity>(`${this.basePath}/cities/publish`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Publish a Place\n     * Publish the Place content to readers\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public publishPlace(data: RequestPublishPlace, observe?: 'body', reportProgress?: boolean): Observable<ResponsePublishPlace>;\n    public publishPlace(data: RequestPublishPlace, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponsePublishPlace>>;\n    public publishPlace(data: RequestPublishPlace, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponsePublishPlace>>;\n    public publishPlace(data: RequestPublishPlace, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling publishPlace.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponsePublishPlace>(`${this.basePath}/places/publish`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove description from City\n     * Remove new description from existing City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removeCityDescription(data: RequestRemoveCityDescription, observe?: 'body', reportProgress?: boolean): Observable<ResponseRemoveCityDescription>;\n    public removeCityDescription(data: RequestRemoveCityDescription, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseRemoveCityDescription>>;\n    public removeCityDescription(data: RequestRemoveCityDescription, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseRemoveCityDescription>>;\n    public removeCityDescription(data: RequestRemoveCityDescription, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling removeCityDescription.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseRemoveCityDescription>(`${this.basePath}/cities/description/remove`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove travel from City\n     * Remove new travel from existing City\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removeCityTravel(data: RequestRemoveCityTravel, observe?: 'body', reportProgress?: boolean): Observable<ResponseRemoveCityTravel>;\n    public removeCityTravel(data: RequestRemoveCityTravel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseRemoveCityTravel>>;\n    public removeCityTravel(data: RequestRemoveCityTravel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseRemoveCityTravel>>;\n    public removeCityTravel(data: RequestRemoveCityTravel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling removeCityTravel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseRemoveCityTravel>(`${this.basePath}/cities/travel/remove`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove description from Place\n     * Remove new description from existing Place\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removePlaceDescription(data: RequestRemovePlaceDescription, observe?: 'body', reportProgress?: boolean): Observable<ResponseRemovePlaceDescription>;\n    public removePlaceDescription(data: RequestRemovePlaceDescription, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseRemovePlaceDescription>>;\n    public removePlaceDescription(data: RequestRemovePlaceDescription, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseRemovePlaceDescription>>;\n    public removePlaceDescription(data: RequestRemovePlaceDescription, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling removePlaceDescription.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseRemovePlaceDescription>(`${this.basePath}/places/description/remove`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove entry from Place\n     * Remove new entry from existing Place\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removePlaceEntry(data: RequestRemovePlaceEntry, observe?: 'body', reportProgress?: boolean): Observable<ResponseRemovePlaceEntry>;\n    public removePlaceEntry(data: RequestRemovePlaceEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseRemovePlaceEntry>>;\n    public removePlaceEntry(data: RequestRemovePlaceEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseRemovePlaceEntry>>;\n    public removePlaceEntry(data: RequestRemovePlaceEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling removePlaceEntry.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseRemovePlaceEntry>(`${this.basePath}/places/entry/remove`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update City description\n     * Update City description\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCityDescription(data: RequestUpdateCityDescription, observe?: 'body', reportProgress?: boolean): Observable<ResponseUpdateCityDescription>;\n    public updateCityDescription(data: RequestUpdateCityDescription, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseUpdateCityDescription>>;\n    public updateCityDescription(data: RequestUpdateCityDescription, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseUpdateCityDescription>>;\n    public updateCityDescription(data: RequestUpdateCityDescription, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling updateCityDescription.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseUpdateCityDescription>(`${this.basePath}/cities/description/update`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update City travel\n     * Update City travel\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateCityTravel(data: RequestUpdateCityTravel, observe?: 'body', reportProgress?: boolean): Observable<ResponseUpdateCityTravel>;\n    public updateCityTravel(data: RequestUpdateCityTravel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseUpdateCityTravel>>;\n    public updateCityTravel(data: RequestUpdateCityTravel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseUpdateCityTravel>>;\n    public updateCityTravel(data: RequestUpdateCityTravel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling updateCityTravel.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseUpdateCityTravel>(`${this.basePath}/cities/travel/update`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Place description\n     * Update Place description\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePlaceDescription(data: RequestUpdatePlaceDescription, observe?: 'body', reportProgress?: boolean): Observable<ResponseUpdatePlaceDescription>;\n    public updatePlaceDescription(data: RequestUpdatePlaceDescription, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseUpdatePlaceDescription>>;\n    public updatePlaceDescription(data: RequestUpdatePlaceDescription, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseUpdatePlaceDescription>>;\n    public updatePlaceDescription(data: RequestUpdatePlaceDescription, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling updatePlaceDescription.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseUpdatePlaceDescription>(`${this.basePath}/places/description/update`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update Place entry\n     * Update Place entry\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePlaceEntry(data: RequestUpdatePlaceEntry, observe?: 'body', reportProgress?: boolean): Observable<ResponseUpdatePlaceEntry>;\n    public updatePlaceEntry(data: RequestUpdatePlaceEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseUpdatePlaceEntry>>;\n    public updatePlaceEntry(data: RequestUpdatePlaceEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseUpdatePlaceEntry>>;\n    public updatePlaceEntry(data: RequestUpdatePlaceEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling updatePlaceEntry.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseUpdatePlaceEntry>(`${this.basePath}/places/entry/update`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * World_of_Stories-Api\n * Interactive stories application for NodeJs typescript server\n *\n * OpenAPI spec version: 1.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { RequestDeleteUser } from '../model/requestDeleteUser';\nimport { RequestGetUser } from '../model/requestGetUser';\nimport { RequestLogin } from '../model/requestLogin';\nimport { RequestRemoveRol } from '../model/requestRemoveRol';\nimport { RequestSetRol } from '../model/requestSetRol';\nimport { RequestSignin } from '../model/requestSignin';\nimport { ResponseData } from '../model/responseData';\nimport { ResponseDeleteUser } from '../model/responseDeleteUser';\nimport { ResponseGetUser } from '../model/responseGetUser';\nimport { ResponseGetUsers } from '../model/responseGetUsers';\nimport { ResponseLogin } from '../model/responseLogin';\nimport { ResponseRemoveRol } from '../model/responseRemoveRol';\nimport { ResponseSetRol } from '../model/responseSetRol';\nimport { ResponseSignin } from '../model/responseSignin';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n    protected basePath = 'http://localhost:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Delete an User\n     * Delete an user\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUser(data: RequestDeleteUser, observe?: 'body', reportProgress?: boolean): Observable<ResponseDeleteUser>;\n    public deleteUser(data: RequestDeleteUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDeleteUser>>;\n    public deleteUser(data: RequestDeleteUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDeleteUser>>;\n    public deleteUser(data: RequestDeleteUser, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling deleteUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseDeleteUser>(`${this.basePath}/users/delete`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get an User\n     * Get an user\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUser(data: RequestGetUser, observe?: 'body', reportProgress?: boolean): Observable<ResponseGetUser>;\n    public getUser(data: RequestGetUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetUser>>;\n    public getUser(data: RequestGetUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetUser>>;\n    public getUser(data: RequestGetUser, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling getUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseGetUser>(`${this.basePath}/users/user`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get All Users\n     * Get all Users\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<ResponseGetUsers>;\n    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetUsers>>;\n    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetUsers>>;\n    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.get<ResponseGetUsers>(`${this.basePath}/users`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Login User\n     * login user\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public login(data: RequestLogin, observe?: 'body', reportProgress?: boolean): Observable<ResponseLogin>;\n    public login(data: RequestLogin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseLogin>>;\n    public login(data: RequestLogin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseLogin>>;\n    public login(data: RequestLogin, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling login.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseLogin>(`${this.basePath}/users/login`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Remove User Rol\n     * Remove new rol to an User\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public removeRol(data: RequestRemoveRol, observe?: 'body', reportProgress?: boolean): Observable<ResponseRemoveRol>;\n    public removeRol(data: RequestRemoveRol, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseRemoveRol>>;\n    public removeRol(data: RequestRemoveRol, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseRemoveRol>>;\n    public removeRol(data: RequestRemoveRol, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling removeRol.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseRemoveRol>(`${this.basePath}/users/remove_rol`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Set User Rol\n     * Set new rol to an User\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public setRol(data: RequestSetRol, observe?: 'body', reportProgress?: boolean): Observable<ResponseSetRol>;\n    public setRol(data: RequestSetRol, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseSetRol>>;\n    public setRol(data: RequestSetRol, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseSetRol>>;\n    public setRol(data: RequestSetRol, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling setRol.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseSetRol>(`${this.basePath}/users/set_rol`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Sign in new User\n     * Sign in new user\n     * @param data Transaction details\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public signin(data: RequestSignin, observe?: 'body', reportProgress?: boolean): Observable<ResponseSignin>;\n    public signin(data: RequestSignin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseSignin>>;\n    public signin(data: RequestSignin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseSignin>>;\n    public signin(data: RequestSignin, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (data === null || data === undefined) {\n            throw new Error('Required parameter data was null or undefined when calling signin.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<ResponseSignin>(`${this.basePath}/users/signin`,\n            data,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n"],"names":["tslib_1.__values"],"mappings":"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"}
