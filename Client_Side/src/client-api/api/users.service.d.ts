/**
 * World_of_Stories-Api
 * Interactive stories application for NodeJs typescript server
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { RequestDeleteUser } from '../model/requestDeleteUser';
import { RequestGetUser } from '../model/requestGetUser';
import { RequestLogin } from '../model/requestLogin';
import { RequestRemoveRol } from '../model/requestRemoveRol';
import { RequestSetRol } from '../model/requestSetRol';
import { RequestSignin } from '../model/requestSignin';
import { ResponseDeleteUser } from '../model/responseDeleteUser';
import { ResponseGetUser } from '../model/responseGetUser';
import { ResponseGetUsers } from '../model/responseGetUsers';
import { ResponseLogin } from '../model/responseLogin';
import { ResponseRemoveRol } from '../model/responseRemoveRol';
import { ResponseSetRol } from '../model/responseSetRol';
import { ResponseSignin } from '../model/responseSignin';
import { Configuration } from '../configuration';
export declare class UsersService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * Delete an User
     * Delete an user
     * @param data Transaction details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteUser(data: RequestDeleteUser, observe?: 'body', reportProgress?: boolean): Observable<ResponseDeleteUser>;
    deleteUser(data: RequestDeleteUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseDeleteUser>>;
    deleteUser(data: RequestDeleteUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseDeleteUser>>;
    /**
     * Get an User
     * Get an user
     * @param data Transaction details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUser(data: RequestGetUser, observe?: 'body', reportProgress?: boolean): Observable<ResponseGetUser>;
    getUser(data: RequestGetUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetUser>>;
    getUser(data: RequestGetUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetUser>>;
    /**
     * Get All Users
     * Get all Users
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getUsers(observe?: 'body', reportProgress?: boolean): Observable<ResponseGetUsers>;
    getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseGetUsers>>;
    getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseGetUsers>>;
    /**
     * Login User
     * login user
     * @param data Transaction details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    login(data: RequestLogin, observe?: 'body', reportProgress?: boolean): Observable<ResponseLogin>;
    login(data: RequestLogin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseLogin>>;
    login(data: RequestLogin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseLogin>>;
    /**
     * Remove User Rol
     * Remove new rol to an User
     * @param data Transaction details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    removeRol(data: RequestRemoveRol, observe?: 'body', reportProgress?: boolean): Observable<ResponseRemoveRol>;
    removeRol(data: RequestRemoveRol, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseRemoveRol>>;
    removeRol(data: RequestRemoveRol, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseRemoveRol>>;
    /**
     * Set User Rol
     * Set new rol to an User
     * @param data Transaction details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    setRol(data: RequestSetRol, observe?: 'body', reportProgress?: boolean): Observable<ResponseSetRol>;
    setRol(data: RequestSetRol, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseSetRol>>;
    setRol(data: RequestSetRol, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseSetRol>>;
    /**
     * Sign in new User
     * Sign in new user
     * @param data Transaction details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    signin(data: RequestSignin, observe?: 'body', reportProgress?: boolean): Observable<ResponseSignin>;
    signin(data: RequestSignin, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseSignin>>;
    signin(data: RequestSignin, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseSignin>>;
}
